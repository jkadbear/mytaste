#!/usr/bin/env bash

RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

UT_GITREPO="https://git.ustclug.org/jkadbear/mytaste.git"
CONFIG_GITREPO="https://git.ustclug.org/jkadbear/chief_config.git"
ZSH_INSTALL_SCRIPT="https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh"
HOMEBREW_INSTALL_SCRIPT="https://raw.githubusercontent.com/Homebrew/install/master/install"

# prompt successful message
echo_succ() {
    echo -e "${GREEN}*$1*${NC}"
}

# prompt failed message
echo_fail() {
    echo -e "${RED}*$1*${NC}"
}

# prompt info message
echo_info() {
    echo -e "${YELLOW}*$1*${NC}"
}

exist_cmd() {
    if type $1 >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

prompt_help() {
    echo
    echo "=============================================="
    echo "What do you want to do? (ENTER q to exit)"
    echo "1. copy ssh keys to another machine"
    echo "2. prepare *nix working environment"
    echo "3. prepare *nix working environment(on server)"
    echo "4. back-up files"
    echo "5. update ut itself"
    echo -n "INPUT>> "
}

run_sel() {
    case $1 in

    "1" )
        if [[ ! -e ~/.ssh/id_rsa ]]; then
            echo_info "No ssh key detected."
            while true; do
                read -p "Auto-generate? [y/n]" yn
                case $yn in
                    [Yy]* ) ssh-keygen -t rsa -P ""; break;;
                    [Nn]* ) echo_info "Try \`ssh-keygen -t rsa -P \"\"\`";
                            echo_info " or \`ssh-keygen -t rsa -b 4096 -C \"your-email\"\`";
                            exit 0;;
                    * )     echo_info "Please answer y or n.";;
                esac
            done
        fi
        if [[ "$OSTYPE" == "OSX" ]] && ! exist_cmd ssh-copy-id; then
            $INSTALL_PREFIX ssh-copy-id
        fi
        echo_info "Please input username(default: localname):"
        read username
        username=${username:-`whoami`}
        echo_info "Please input remote-host-addr:"
        read remote_host
        echo_info "ssh-copy-id -i ~/.ssh/id_rsa.pub $username@$remote_host"
        ssh-copy-id -i ~/.ssh/id_rsa.pub $username@$remote_host
        ;;

    "2" | "3" )
        # install git
        if ! exist_cmd git; then
            echo_info "installing git..."
            $INSTALL_PREFIX git
        else
            echo_info "git is already existed"
        fi
        # install vim
        if  ! exist_cmd vim; then
            echo_info "installing vim..."
            $INSTALL_PREFIX vim
        else
            echo_info "vim is already existed"
        fi
        # install z-shell
        if  ! exist_cmd zsh; then
            echo_info "installing zsh..."
            $INSTALL_PREFIX zsh
        else
            echo_info "zsh is already existed"
        fi
        # install oh-my-zsh
        if [[ ! -d ~/.oh-my-zsh ]]; then
            echo_info "installing zsh..."
            wget $ZSH_INSTALL_SCRIPT
            # do not enter zsh environment instantly
            sed -i.bak '/env zsh/d' install.sh
            sh install.sh
            rm install.sh install.sh.bak
        else
            echo_info "oh-my-zsh is already existed"
        fi
        # install tmux
        if  ! exist_cmd tmux; then
            echo_info "installing tmux..."
            $INSTALL_PREFIX tmux
        else
            echo_info "tmux is already existed"
        fi
        # apply configuration to zsh, vimperator, vim, tmux
        if [[ ! -d ~/.chief_config ]]; then
            cd ~
            if [[ $OSTYPE == "OSX" ]]; then
                git clone $CONFIG_GITREPO .chief_config
            else
                if [[ $1 == "3" ]]; then
                    git clone -b ubuntu-server $CONFIG_GITREPO .chief_config
                else
                    git clone -b ubuntu $CONFIG_GITREPO .chief_config
                fi
            fi
            cd .chief_config
            cp ./zshrc ~/.zshrc
            cp ./vimperatorrc ~/.vimperatorrc
            cp ./vimrc ~/.vimrc
            cp ./tmux.conf ~/.tmux.conf
            cd $OLDPWD
        else
            echo_info "~/.chief_config is already existed"
            cd ~/.chief_config
            git pull
            cd $OLDPWD
        fi
        echo_succ "Successfully done"
        echo_info "Try 'chsh -s /bin/zsh' or 'sudo chsh username -s /bin/zsh'"
        echo_info "Then 'env zsh'"
        ;;

    "4" )
        if [[ ! -e ~/.mytaste/backup.sh ]]; then
            echo_fail "~/.mytaste/backup.sh does not exists!"
            return
        fi
        echo_info "[DEFAULT]: zsh ~/.mytaste/backup.sh (continue? [y/n])"
        read cho
        if [[ $cho == "y" || $cho == "Y" || $cho == "" ]]; then
            zsh ~/.mytaste/backup.sh
        fi
        ;;

    "5" )
        if [[ -d ~/.mytaste ]]; then
            cd ~/.mytaste
            echo_info "git pull"
            git pull
            cd $OLDPWD
        else
            git clone $UT_GITREPO ~/.mytaste
            cp ~/.mytaste/ut .
            echo_info "cloned git repo at '~/.mytaste'"
        fi
        echo_succ "Update done."
        echo_info "Please restart 'ut' and make sure that '~/.mytaste' is in your \$PATH."
        ;;

    "q" )
        exit 0
        ;;

    * )
        echo_fail "Illegal input!"
        ;;

    esac
}

# detect OS type
if [[ $(uname) = "Darwin" ]]; then
    OSTYPE="OSX"
    if ! exist_cmd brew; then
        # install Homebrew
        /usr/bin/ruby -e "$(curl -fsSL $HOMEBREW_INSTALL_SCRIPT)"
    fi
    INSTALL_PREFIX="brew"
else
    OSTYPE=$(cat /etc/issue | head -n 1 | cut -c1-6)
    case $OSTYPE in
    "Ubuntu" | "Raspbi" )
        INSTALL_PREFIX="sudo apt-get install -y";;
    "Amazon" )
        INSTALL_PREFIX="sudo yum install -y";;
    * )
        echo_fail "Unsupported OS Type!"
        exit 1;;
    esac
fi

if [[ $# > 0 ]]; then
    run_sel $1
else
    while true; do
        prompt_help
        read sel
        run_sel $sel
    done
fi
